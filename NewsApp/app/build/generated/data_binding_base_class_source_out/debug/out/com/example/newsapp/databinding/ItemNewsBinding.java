// Generated by view binder compiler. Do not edit!
package com.example.newsapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.newsapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemNewsBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView descriptionNews;

  @NonNull
  public final ImageView imageNews;

  @NonNull
  public final TextView publishedNews;

  @NonNull
  public final TextView sourceNews;

  @NonNull
  public final TextView titleNews;

  private ItemNewsBinding(@NonNull ConstraintLayout rootView, @NonNull TextView descriptionNews,
      @NonNull ImageView imageNews, @NonNull TextView publishedNews, @NonNull TextView sourceNews,
      @NonNull TextView titleNews) {
    this.rootView = rootView;
    this.descriptionNews = descriptionNews;
    this.imageNews = imageNews;
    this.publishedNews = publishedNews;
    this.sourceNews = sourceNews;
    this.titleNews = titleNews;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemNewsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemNewsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_news, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemNewsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.descriptionNews;
      TextView descriptionNews = ViewBindings.findChildViewById(rootView, id);
      if (descriptionNews == null) {
        break missingId;
      }

      id = R.id.imageNews;
      ImageView imageNews = ViewBindings.findChildViewById(rootView, id);
      if (imageNews == null) {
        break missingId;
      }

      id = R.id.publishedNews;
      TextView publishedNews = ViewBindings.findChildViewById(rootView, id);
      if (publishedNews == null) {
        break missingId;
      }

      id = R.id.sourceNews;
      TextView sourceNews = ViewBindings.findChildViewById(rootView, id);
      if (sourceNews == null) {
        break missingId;
      }

      id = R.id.titleNews;
      TextView titleNews = ViewBindings.findChildViewById(rootView, id);
      if (titleNews == null) {
        break missingId;
      }

      return new ItemNewsBinding((ConstraintLayout) rootView, descriptionNews, imageNews,
          publishedNews, sourceNews, titleNews);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
